[clang][doc] Add documentation for the ASTs used to represent C++ templates.

This PR contains a draft proposal for additional documentation focusing
on the way C++ templates are represented in the Clang AST.  I'd like to
get feedback from those with relevant expertise.

## Approach

The overall approach is to focus on documenting the private data members
of the relevant AST classes, with only secondary importance given to the
public APIs.  This may be controversial, as it is in sharp contrast to
the Doxygen-generated API documentation, which only shows the APIs and
omits private data entirely.  The reason for the focus on the data is,
in my experience and opinion, thoroughly understanding the data is
necessary for truly grasping the design, whereas the APIs can easily be
learned individually as needed.

I've documented some physical memory allocation patterns, such as
trailing objects and "owner" pointers.  The reason is, although an AST
consumer does not care where things are in memory, they *do* care
whether a piece of data is potentially shared with other AST nodes,
since that affects both how it is interpreted and what modifications
might be possible (for those trying to do source-to-source using Clang
at the AST level).  Trailing objects and owner pointers are specifically
*not* shared, and documenting them as such conveys the non-shared
nature.

Despite the focus on private data, I've tentatively placed this under
the "Using Clang as a Library" section of `index.rst` rather than
"Design Documents", since the intended primary audience is those who
want to consume rather than maintain the AST.  Again, the idea is to
gain a deep understanding of how the AST is organized since that serves
as a mental framework for understanding what particular APIs do.

## Comparison with other documentation

The material here has some similarity to "The AST Library" in
`InternalsManual.rst`, although there is almost no overlap in topics
actually covered.  I considered integrating it into that section, but
the new material is approximately as large as that entire document, and
I didn't want to overwhelm it with material about one subject.

Perhaps more concerning, there is overlap between material in
`ASTsForTemplates.rst` and the comments in the C++ source code, creating
opportunity for divergence.  Ideally some mechanism would ensure
consistency going forward, but I don't think transclusion works because
it's difficult to phrase things in a way that makes sense for both
contexts.

## Tools used

The document makes extensive use of diagrams produced using two of my
own tools, called `ded` and `print-clang-ast`.  The former is a diagram
editor, and the latter is a Clang-based tool written specifically for
this project.  Links to their github repos are in comments at the top of
`ASTsForTemplates.rst`.
